// Generated by CoffeeScript 1.6.3
var define;

define = (function(root) {
  var require;
  if (typeof root.define === 'function' && root.define.amd) {
    return root.define;
  } else {
    require = function(dep) {
      return (function() {
        var _ref;
        switch (dep) {
          case './map_data':
            return ribcageGoogleMaps.models.mapData;
          case '../gmaps':
            return (_ref = root.google) != null ? _ref.maps : void 0;
          default:
            return null;
        }
      })() || (function() {
        throw new Error("Unmet dependency " + dep);
      })();
    };
    return function(factory) {
      var module;
      module = factory(require);
      root.ribcageGoogleMaps.models.addressModel = module;
      root.ribcageGoogleMaps.models.Address = module.Model;
      return root.ribcageGoogleMaps.modelMixins.Address = module.mixin;
    };
  }
})(this);

define(function(require) {
  var AddressModel, Geocoder, GeocoderStatus, MapDataModel, addressModelMixin, dh, _ref;
  dh = require('dahelpers');
  MapDataModel = require('./map_data').Model;
  _ref = require('../gmaps'), Geocoder = _ref.Geocoder, GeocoderStatus = _ref.GeocoderStatus;
  addressModelMixin = {
    defaults: dh.extend({
      address: ''
    }, MapDataModel.prototype.defaults),
    setLocation: function(geocoderResponse) {
      var firstResult, loc;
      firstResult = geocoderResponse[0];
      loc = firstResult.geometry.location;
      this.lat(loc.lat());
      return this.long(loc.lng());
    },
    address: function(address, callback) {
      var gc, req,
        _this = this;
      if (address == null) {
        address = null;
      }
      if (address != null) {
        this.set('address', address);
        req = {
          address: address
        };
        gc = new Geocoder();
        return gc.geocode(req, function(res, status) {
          if (status !== GeocoderStatus.OK) {
            if (callback != null) {
              callback(status);
            }
            return;
          }
          _this.setLocation(res);
          if (callback != null) {
            return callback(null, _this);
          }
        });
      } else {
        return this.get('address');
      }
    }
  };
  AddressModel = MapDataModel.extend(addressModelMixin);
  return {
    mixin: addressModelMixin,
    Model: AddressModel
  };
});
